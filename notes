-------------------------
--------------------------
This are just personal notes to this project and what I did learned new.
You can ignore them.
-------------------------
-------------------------
         JFrame
-------------------------
Is a part of a collection of components, its the "frame" of a painting, part of a larger collections of GUI components
JFrame, JPanel, JTextField, JScrollPane, JLabel...

Size: If you place the window size in JFrame you setting the window including Top Bar of the window. So they are invisible
Size in the frame. That's why we do the size in the Panel and not the Frame.

-------------------------
        javadoc
-------------------------
Like I was used in C# summary's fpr constructors can get created by /// and here in Java you do /** + ENTER
/**
  * Example Title
  *
  * @param param1 Description of the param
  * @param param2 Description of the param
  *
  */

-------------------------
        Mouse listener
-------------------------
mouseListener() checking -clicked -pressed -released
mouseMotionListener() -moved -dragged

-------------------------
        g.setColor()
-------------------------
g.setColor() gives the upcoming shapes a color

-------------------------
        nextInt(x)
-------------------------
nextInt(x) returns an integer between 0 and x

-------------------------
        Gameloop
-------------------------
GameLoop needed to repaint the surface, everytime we call repaint we're actually call paintComponent and repainting it
with the new values

GameLoop components:
-Thread
-Runnable

-------------------------
    Problems with gameloops just with repaint()
-------------------------
One of many problems of repaint-loop is that everything(input, rendering, updates, event check) happens on the same thread.
We want that gameloop is on a seperate thread and updates, event checks are on them
and on the main thread are the inputs, rendering

-------------------------
        Thread/Runnable
-------------------------
What is a Thread?
Its similar like an process in a OS like browser process, discord etc.
- One program can have more than one process
- One process can have more than one thread
-- A thread takes care of a specific task

What is a Runnable?
-It passed into a thread
- The code we want to run in a seperate thread
Call: Thread.start();


-------------------------
        Animations
-------------------------
First of all you need to get the sprites idle into a array and then you loop it through the full array everytime
and it will look like an animation, but its just "changing" the img.

To be efficient and don't have an big array like idleAnimation, runAnimation etc. you can do an 2D Array.

As I did the constants I learned something new, that if you have in a switch/case cases that returning the same amount
you can write them together and then one return like this:

 case JUMP:
 case ATTACK_1:
 case ATTACK_JUMP_1:
 case ATTACK_JUMP_2:
    return 3;

Everytime I change the animation like from IDLE to ATTACKING we need to reset the animationtick and get the first frame.
 -------------------------
        UPS vs FPS
 -------------------------
 update/tick vs render/frames
 -------------------------
 update/tick: take care of logic, playermove, event etc. - In case of laggs there is a way to "catch up"
 render/frames: Draws the gamescene, the level, player, enemies ect.

 Reasons to seperate them: Easier to read the code, logic needs to run smooth as possible, user can set different FPS for different systems.
 +++Get more into UPS like how it works to handle lost times in FPS++